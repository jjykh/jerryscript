
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:1->ident(x)
  [  0] CBC_CALL0_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:2->ident(a)
  [  2] CBC_EXT_WITH_CREATE_CONTEXT
  [  5] CBC_PUSH_IDENT_REFERENCE idx:1->ident(x)
  [  2] CBC_CALL0_PROP_BLOCK
  [  2] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  0] CBC_CONTEXT_END
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(x)
  [  0] CBC_POP
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:2->ident(a)
  [  2] CBC_EXT_WITH_CREATE_CONTEXT
  [  5] CBC_PUSH_IDENT_REFERENCE idx:1->ident(x)
  [  2] CBC_CALL0_PROP_BLOCK
  [  2] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  0] CBC_CONTEXT_END
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:3->ident(b)
  [  3] CBC_EXT_FOR_IN_CREATE_CONTEXT
  [  5] CBC_PUSH_TWO_LITERALS idx:2->ident(a) idx:4->string(m)
  [  6] CBC_EXT_FOR_IN_GET_NEXT
  [  3] CBC_ASSIGN
  [  4] CBC_PUSH_LITERAL idx:1->ident(x)
  [  3] CBC_CALL0_BLOCK
  [  3] CBC_JUMP_FORWARD
  [  4] CBC_PUSH_LITERAL idx:1->ident(x)
  [  3] CBC_CALL0_BLOCK
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  0] CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(x)
  [  2] CBC_EXT_WITH_CREATE_CONTEXT
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_JUMP_FORWARD
  [  3] CBC_PUSH_FALSE
  [  2] CBC_BRANCH_IF_TRUE_BACKWARD
  [  0] CBC_CONTEXT_END
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:3->ident(b)
  [  3] CBC_EXT_FOR_IN_CREATE_CONTEXT
  [  4] CBC_EXT_FOR_IN_GET_NEXT
  [  3] CBC_ASSIGN_SET_IDENT idx:5->var_ident(var_a)
  [  3] CBC_JUMP_FORWARD
  [  4] CBC_PUSH_LITERAL idx:1->ident(x)
  [  3] CBC_CALL0_BLOCK
  [  0] CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:1->ident(x)
  [  2] CBC_EXT_WITH_CREATE_CONTEXT
  [  2] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  0] CBC_CONTEXT_END
  [  0] CBC_POST_INCR_IDENT idx:1->ident(x)
  [  1] CBC_PUSH_LITERAL idx:1->ident(x)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:3->ident(b)
  [  3] CBC_EXT_FOR_IN_CREATE_CONTEXT
  [  4] CBC_EXT_FOR_IN_GET_NEXT
  [  3] CBC_ASSIGN_SET_IDENT idx:2->ident(a)
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  0] CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT
  [  0] CBC_POST_INCR_IDENT idx:1->ident(x)
  [  1] CBC_PUSH_FALSE
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:3->ident(b)
  [  1] CBC_CALL0_PUSH_RESULT
  [  1] CBC_MULTIPLY_RIGHT_LITERAL idx:6->ident(c)
  [  3] CBC_EXT_FOR_IN_CREATE_CONTEXT
  [  5] CBC_PUSH_TWO_LITERALS idx:2->ident(a) idx:1->ident(x)
  [  5] CBC_CALL0_PUSH_RESULT
  [  5] CBC_PUSH_PROP_LITERAL idx:4->string(m)
  [  6] CBC_EXT_FOR_IN_GET_NEXT
  [  3] CBC_ASSIGN
  [  3] CBC_JUMP_FORWARD
  [  4] CBC_PUSH_LITERAL idx:1->ident(x)
  [  3] CBC_CALL0_BLOCK
  [  3] CBC_JUMP_FORWARD
  [  3] CBC_JUMP_FORWARD
  [  4] CBC_PUSH_LITERAL idx:7->string(5)
  [  3] CBC_BRANCH_IF_TRUE_BACKWARD
  [  4] CBC_PUSH_LITERAL idx:6->ident(c)
  [  6] CBC_EXT_FOR_IN_CREATE_CONTEXT
  [  6] CBC_JUMP_FORWARD
  [  7] CBC_RIGHT_SHIFT_TWO_LITERALS idx:8->string(x) idx:9->ident(y)
  [  6] CBC_POP
  [  7] CBC_EXT_FOR_IN_GET_NEXT
  [  6] CBC_ASSIGN_SET_IDENT idx:2->var_ident(a)
  [  6] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  3] CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT
  [  0] CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 7
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 7
  Const literal range end: 10
  Literal range end: 10

   0 : CBC_DEFINE_VARS from: 0 to: 1
         idx:0(ident)->var_ident(a)
         idx:1(ident)->var_ident(var_a)
   2 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
   4 : CBC_POP_BLOCK
   5 : CBC_JUMP_FORWARD offset:5(->10)
   7 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
   9 : CBC_CALL0_BLOCK
  10 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
  12 : CBC_POP_BLOCK
  13 : CBC_PUSH_LITERAL idx:0(ident)->var_ident(a)
  15 : CBC_EXT_WITH_CREATE_CONTEXT offset:9(->24)
  18 : CBC_PUSH_IDENT_REFERENCE idx:3(ident)->ident(x)
  20 : CBC_CALL0_PROP_BLOCK
  21 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:3(->24)
  23 : CBC_CONTEXT_END
  24 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
  26 : CBC_POP_BLOCK
  27 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
  29 : CBC_POP
  30 : CBC_PUSH_LITERAL idx:0(ident)->var_ident(a)
  32 : CBC_EXT_WITH_CREATE_CONTEXT offset:9(->41)
  35 : CBC_PUSH_IDENT_REFERENCE idx:3(ident)->ident(x)
  37 : CBC_CALL0_PROP_BLOCK
  38 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:3(->41)
  40 : CBC_CONTEXT_END
  41 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
  43 : CBC_POP_BLOCK
  44 : CBC_PUSH_LITERAL idx:4(ident)->ident(b)
  46 : CBC_EXT_FOR_IN_CREATE_CONTEXT offset:22(->68)
  49 : CBC_PUSH_TWO_LITERALS idx:0(ident)->var_ident(a) idx:7(lit)->string(m)
  52 : CBC_EXT_FOR_IN_GET_NEXT
  54 : CBC_ASSIGN
  55 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
  57 : CBC_CALL0_BLOCK
  58 : CBC_JUMP_FORWARD offset:5(->63)
  60 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
  62 : CBC_CALL0_BLOCK
  63 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:5(->68)
  65 : CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT offset:16(->49)
  68 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
  70 : CBC_POP_BLOCK
  71 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
  73 : CBC_EXT_WITH_CREATE_CONTEXT offset:11(->84)
  76 : CBC_JUMP_FORWARD offset:4(->80)
  78 : CBC_JUMP_FORWARD offset:5(->83)
  80 : CBC_PUSH_FALSE
  81 : CBC_BRANCH_IF_TRUE_BACKWARD offset:3(->78)
  83 : CBC_CONTEXT_END
  84 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
  86 : CBC_POP_BLOCK
  87 : CBC_PUSH_LITERAL idx:4(ident)->ident(b)
  89 : CBC_EXT_FOR_IN_CREATE_CONTEXT offset:15(->104)
  92 : CBC_EXT_FOR_IN_GET_NEXT
  94 : CBC_ASSIGN_SET_IDENT idx:1(ident)->var_ident(var_a)
  96 : CBC_JUMP_FORWARD offset:5(->101)
  98 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
 100 : CBC_CALL0_BLOCK
 101 : CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT offset:9(->92)
 104 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
 106 : CBC_POP_BLOCK
 107 : CBC_JUMP_FORWARD offset:12(->119)
 109 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
 111 : CBC_EXT_WITH_CREATE_CONTEXT offset:6(->117)
 114 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:3(->117)
 116 : CBC_CONTEXT_END
 117 : CBC_POST_INCR_IDENT idx:3(ident)->ident(x)
 119 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
 121 : CBC_BRANCH_IF_TRUE_BACKWARD offset:12(->109)
 123 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
 125 : CBC_POP_BLOCK
 126 : CBC_JUMP_FORWARD offset:18(->144)
 128 : CBC_PUSH_LITERAL idx:4(ident)->ident(b)
 130 : CBC_EXT_FOR_IN_CREATE_CONTEXT offset:12(->142)
 133 : CBC_EXT_FOR_IN_GET_NEXT
 135 : CBC_ASSIGN_SET_IDENT idx:0(ident)->var_ident(a)
 137 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:5(->142)
 139 : CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT offset:6(->133)
 142 : CBC_POST_INCR_IDENT idx:3(ident)->ident(x)
 144 : CBC_PUSH_FALSE
 145 : CBC_BRANCH_IF_TRUE_BACKWARD offset:17(->128)
 147 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
 149 : CBC_POP_BLOCK
 150 : CBC_PUSH_LITERAL idx:4(ident)->ident(b)
 152 : CBC_CALL0_PUSH_RESULT
 153 : CBC_MULTIPLY_RIGHT_LITERAL idx:5(ident)->ident(c)
 155 : CBC_EXT_FOR_IN_CREATE_CONTEXT offset:48(->203)
 158 : CBC_PUSH_TWO_LITERALS idx:0(ident)->var_ident(a) idx:3(ident)->ident(x)
 161 : CBC_CALL0_PUSH_RESULT
 162 : CBC_PUSH_PROP_LITERAL idx:7(lit)->string(m)
 164 : CBC_EXT_FOR_IN_GET_NEXT
 166 : CBC_ASSIGN
 167 : CBC_JUMP_FORWARD offset:33(->200)
 169 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
 171 : CBC_CALL0_BLOCK
 172 : CBC_JUMP_FORWARD offset:4(->176)
 174 : CBC_JUMP_FORWARD offset:26(->200)
 176 : CBC_PUSH_LITERAL idx:8(lit)->string(5)
 178 : CBC_BRANCH_IF_TRUE_BACKWARD offset:4(->174)
 180 : CBC_PUSH_LITERAL idx:5(ident)->ident(c)
 182 : CBC_EXT_FOR_IN_CREATE_CONTEXT offset:18(->200)
 185 : CBC_JUMP_FORWARD offset:6(->191)
 187 : CBC_RIGHT_SHIFT_TWO_LITERALS idx:9(lit)->string(x) idx:6(ident)->ident(y)
 190 : CBC_POP
 191 : CBC_EXT_FOR_IN_GET_NEXT
 193 : CBC_ASSIGN_SET_IDENT idx:0(ident)->var_ident(a)
 195 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:5(->200)
 197 : CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT offset:12(->185)
 200 : CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT offset:42(->158)
 203 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
 205 : CBC_POP_BLOCK
 206 : CBC_RETURN_WITH_BLOCK

Byte code size: 207 bytes

Script parsing successfully completed. Total byte code size: 207 bytes

--- Script parsing end ---

